import{r as n,j as e,l as E,L as A,m as x}from"./index-B8kRnX3K.js";const L=async(l,c,m,o="staff")=>{try{if(!c)throw new Error("User ID is required");if(!m)throw new Error("Store ID is required");const{data:i,error:d}=await l.from("store_users").select("id").eq("user_id",c).eq("store_id",m).single();if(d&&d.code!=="PGRST116")return console.error("Error checking store_users:",d),{success:!1,error:d,message:`Failed to check if user is in store: ${d.message}`};if(i)return{success:!0,created:!1,message:"User already connected to store"};const g=new Date().toISOString(),{error:u}=await l.from("store_users").insert([{user_id:c,store_id:m,role:o,is_active:!0,created_at:g,updated_at:g}]);if(u)return console.error("Error inserting store_users:",u),{success:!1,error:u,message:`Failed to add user to store: ${u.message}`};const{error:w}=await l.from("profiles").update({store_id:m}).eq("id",c);return w&&console.warn("Warning: Could not update profile with store_id:",w),{success:!0,created:!0,message:"User successfully connected to store"}}catch(i){return console.error("Exception in ensureUserInStore:",i),{success:!1,error:i,message:`Exception connecting user to store: ${i.message}`}}},T=()=>{const[l,c]=n.useState(!1),[m,o]=n.useState(""),[i,d]=n.useState(""),[g,u]=n.useState(!1),[w,$]=n.useState(0),[v,M]=n.useState(0),[F,C]=n.useState(0),[j,U]=n.useState([]),r=(t,f="info")=>{U(h=>[...h,{message:t,type:f,timestamp:new Date}])},D=async()=>{try{c(!0),o("Starting migration..."),r("Starting migration process"),o("Fetching users...");const{data:t,error:f}=await x.from("profiles").select("id, email, full_name, role, store_id");if(f)throw new Error(`Failed to fetch profiles: ${f.message}`);r(`Found ${t.length} user profiles`),$(t.length),o("Fetching stores...");const{data:h,error:N}=await x.from("stores").select("id, name");if(N)throw new Error(`Failed to fetch stores: ${N.message}`);r(`Found ${h.length} stores`),M(h.length),o("Checking existing store user mappings...");const{data:S,error:_}=await x.from("store_users").select("store_id, user_id");if(_)throw new Error(`Failed to fetch store_users: ${_.message}`);r(`Found ${S.length} existing store user mappings`),C(S.length);const y=t.filter(s=>!S.some(a=>a.user_id===s.id));if(y.length===0){r("All users already have store mappings","success"),o("No migration needed"),u(!0);return}r(`Found ${y.length} users that need store mappings`),o(`Adding ${y.length} users to stores...`);let p=h[0];if(!p){r("No stores found, creating a default store"),o("Creating default store...");const{data:s,error:a}=await x.from("stores").insert([{name:"Default Store",code:"DEF"+Math.floor(Math.random()*1e3),created_at:new Date().toISOString(),updated_at:new Date().toISOString()}]).select().single();if(a)throw new Error(`Failed to create default store: ${a.message}`);p=s,r(`Created default store: ${p.name}`,"success")}for(const s of y){let a=s.store_id;if(!a&&p&&(a=p.id,r(`Will use default store for user: ${s.email||s.id}`)),!a){r(`Skipping user ${s.email||s.id} - no store_id available`,"warning");continue}const b=await L(x,s.id,a,s.role||"staff");b.success?b.created?r(`Added user ${s.email||s.id} to store`,"success"):r(`User ${s.email||s.id} already mapped to store`,"info"):r(`Failed to add user ${s.email||s.id} to store: ${b.message}`,"error")}o("Migration completed successfully!"),u(!0),r("Migration completed successfully!","success")}catch(t){console.error("Migration failed:",t),d(t.message),o("Migration failed"),r(`Error: ${t.message}`,"error")}finally{c(!1)}};return e.jsxs("div",{className:"p-6 max-w-4xl mx-auto",children:[e.jsx("h1",{className:"text-2xl font-bold mb-4",children:"Authentication & Security Migration"}),e.jsx("div",{className:"mb-6",children:e.jsx("p",{className:"mb-2",children:"This utility will ensure all users are properly added to the store_users table. This fixes the issue where users can authenticate but aren't associated with a store."})}),i&&e.jsx(E,{type:"error",title:"Migration Error",message:i,className:"mb-4"}),g&&e.jsx(E,{type:"success",title:"Migration Complete",message:"All users have been successfully mapped to stores.",className:"mb-4"}),e.jsxs("div",{className:"flex flex-col sm:flex-row gap-4 mb-6",children:[e.jsxs("div",{className:"bg-white p-4 rounded-lg shadow border border-gray-200 flex-1",children:[e.jsx("h3",{className:"font-medium text-gray-700",children:"Users"}),e.jsx("p",{className:"text-2xl font-bold",children:w})]}),e.jsxs("div",{className:"bg-white p-4 rounded-lg shadow border border-gray-200 flex-1",children:[e.jsx("h3",{className:"font-medium text-gray-700",children:"Stores"}),e.jsx("p",{className:"text-2xl font-bold",children:v})]}),e.jsxs("div",{className:"bg-white p-4 rounded-lg shadow border border-gray-200 flex-1",children:[e.jsx("h3",{className:"font-medium text-gray-700",children:"Store Users"}),e.jsx("p",{className:"text-2xl font-bold",children:F})]})]}),e.jsxs("div",{className:"mb-6",children:[e.jsx("button",{onClick:D,disabled:l||g,className:"btn btn-primary",children:l?"Running Migration...":g?"Migration Complete":"Run Migration"}),l&&e.jsxs("div",{className:"mt-4 flex items-center",children:[e.jsx(A,{size:"sm"}),e.jsx("span",{className:"ml-2",children:m})]})]}),e.jsxs("div",{className:"border border-gray-200 rounded-lg overflow-hidden",children:[e.jsx("div",{className:"bg-gray-50 px-4 py-2 border-b border-gray-200",children:e.jsx("h3",{className:"font-medium",children:"Migration Log"})}),e.jsx("div",{className:"bg-gray-900 text-gray-100 p-4 font-mono text-sm h-80 overflow-y-auto",children:j.length===0?e.jsx("div",{className:"text-gray-500",children:"No logs yet. Run the migration to see details."}):j.map((t,f)=>e.jsxs("div",{className:`mb-1 ${t.type==="error"?"text-red-400":t.type==="warning"?"text-yellow-400":t.type==="success"?"text-green-400":"text-gray-300"}`,children:[e.jsxs("span",{className:"opacity-70",children:["[",t.timestamp.toLocaleTimeString(),"]"]})," ",t.message]},f))})]})]})};export{T as default};
//# sourceMappingURL=MigrationHelper-Cbr9xZze.js.map
