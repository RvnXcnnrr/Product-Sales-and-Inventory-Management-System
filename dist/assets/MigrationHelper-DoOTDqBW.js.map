{"version":3,"file":"MigrationHelper-DoOTDqBW.js","sources":["../../src/pages/MigrationHelper.jsx"],"sourcesContent":["// Migration helper to set up store_users table and apply security rules\nimport React, { useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport LoadingSpinner from '../components/ui/LoadingSpinner';\nimport Alert from '../components/ui/Alert';\nimport { ensureUserInStore } from '../utils/store-user-helpers';\n\nconst MigrationHelper = () => {\n  const [loading, setLoading] = useState(false);\n  const [status, setStatus] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n  const [userCount, setUserCount] = useState(0);\n  const [storeCount, setStoreCount] = useState(0);\n  const [storeUserCount, setStoreUserCount] = useState(0);\n  const [logs, setLogs] = useState([]);\n\n  // Add a log entry\n  const addLog = (message, type = 'info') => {\n    setLogs(prev => [...prev, { message, type, timestamp: new Date() }]);\n  };\n\n  // Run the migration\n  const runMigration = async () => {\n    try {\n      setLoading(true);\n      setStatus('Starting migration...');\n      addLog('Starting migration process');\n\n      // 1. First get all users from profiles table\n      setStatus('Fetching users...');\n      const { data: profiles, error: profilesError } = await supabase\n        .from('profiles')\n        .select('id, email, full_name, role, store_id');\n\n      if (profilesError) {\n        throw new Error(`Failed to fetch profiles: ${profilesError.message}`);\n      }\n\n      addLog(`Found ${profiles.length} user profiles`);\n      setUserCount(profiles.length);\n\n      // 2. Get all stores\n      setStatus('Fetching stores...');\n      const { data: stores, error: storesError } = await supabase\n        .from('stores')\n        .select('id, name');\n\n      if (storesError) {\n        throw new Error(`Failed to fetch stores: ${storesError.message}`);\n      }\n\n      addLog(`Found ${stores.length} stores`);\n      setStoreCount(stores.length);\n\n      // 3. Get existing store_users entries\n      setStatus('Checking existing store user mappings...');\n      const { data: existingStoreUsers, error: storeUsersError } = await supabase\n        .from('store_users')\n        .select('store_id, user_id');\n\n      if (storeUsersError) {\n        throw new Error(`Failed to fetch store_users: ${storeUsersError.message}`);\n      }\n\n      addLog(`Found ${existingStoreUsers.length} existing store user mappings`);\n      setStoreUserCount(existingStoreUsers.length);\n\n      // 4. Find users who need to be added to a store\n      const usersToAddToStore = profiles.filter(profile => {\n        // Skip users who already have a store_user entry\n        return !existingStoreUsers.some(su => su.user_id === profile.id);\n      });\n\n      if (usersToAddToStore.length === 0) {\n        addLog('All users already have store mappings', 'success');\n        setStatus('No migration needed');\n        setSuccess(true);\n        return;\n      }\n\n      addLog(`Found ${usersToAddToStore.length} users that need store mappings`);\n      setStatus(`Adding ${usersToAddToStore.length} users to stores...`);\n\n      // 5. Create default store if needed\n      let defaultStore = stores[0];\n      \n      if (!defaultStore) {\n        addLog('No stores found, creating a default store');\n        setStatus('Creating default store...');\n        \n        const { data: newStore, error: createStoreError } = await supabase\n          .from('stores')\n          .insert([{\n            name: 'Default Store',\n            code: 'DEF' + Math.floor(Math.random() * 1000),\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          }])\n          .select()\n          .single();\n\n        if (createStoreError) {\n          throw new Error(`Failed to create default store: ${createStoreError.message}`);\n        }\n\n        defaultStore = newStore;\n        addLog(`Created default store: ${defaultStore.name}`, 'success');\n      }\n\n      // 6. Process each user\n      for (const profile of usersToAddToStore) {\n        // Determine which store to use\n        let targetStoreId = profile.store_id;\n        \n        // If user doesn't have a store_id in their profile, use default\n        if (!targetStoreId && defaultStore) {\n          targetStoreId = defaultStore.id;\n          addLog(`Will use default store for user: ${profile.email || profile.id}`);\n        }\n        \n        if (!targetStoreId) {\n          addLog(`Skipping user ${profile.email || profile.id} - no store_id available`, 'warning');\n          continue;\n        }\n\n        // Use our helper function to add the user to store_users\n        const result = await ensureUserInStore(\n          supabase,\n          profile.id,\n          targetStoreId,\n          profile.role || 'staff'\n        );\n\n        if (result.success) {\n          if (result.created) {\n            addLog(`Added user ${profile.email || profile.id} to store`, 'success');\n          } else {\n            addLog(`User ${profile.email || profile.id} already mapped to store`, 'info');\n          }\n        } else {\n          addLog(`Failed to add user ${profile.email || profile.id} to store: ${result.message}`, 'error');\n        }\n      }\n\n      setStatus('Migration completed successfully!');\n      setSuccess(true);\n      addLog('Migration completed successfully!', 'success');\n    } catch (err) {\n      console.error('Migration failed:', err);\n      setError(err.message);\n      setStatus('Migration failed');\n      addLog(`Error: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4\">Authentication & Security Migration</h1>\n      \n      <div className=\"mb-6\">\n        <p className=\"mb-2\">\n          This utility will ensure all users are properly added to the store_users table.\n          This fixes the issue where users can authenticate but aren&apos;t associated with a store.\n        </p>\n      </div>\n\n      {error && (\n        <Alert \n          type=\"error\"\n          title=\"Migration Error\"\n          message={error}\n          className=\"mb-4\"\n        />\n      )}\n\n      {success && (\n        <Alert \n          type=\"success\"\n          title=\"Migration Complete\"\n          message=\"All users have been successfully mapped to stores.\"\n          className=\"mb-4\"\n        />\n      )}\n\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"bg-white p-4 rounded-lg shadow border border-gray-200 flex-1\">\n          <h3 className=\"font-medium text-gray-700\">Users</h3>\n          <p className=\"text-2xl font-bold\">{userCount}</p>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow border border-gray-200 flex-1\">\n          <h3 className=\"font-medium text-gray-700\">Stores</h3>\n          <p className=\"text-2xl font-bold\">{storeCount}</p>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg shadow border border-gray-200 flex-1\">\n          <h3 className=\"font-medium text-gray-700\">Store Users</h3>\n          <p className=\"text-2xl font-bold\">{storeUserCount}</p>\n        </div>\n      </div>\n\n      <div className=\"mb-6\">\n        <button\n          onClick={runMigration}\n          disabled={loading || success}\n          className=\"btn btn-primary\"\n        >\n          {loading ? 'Running Migration...' : success ? 'Migration Complete' : 'Run Migration'}\n        </button>\n\n        {loading && (\n          <div className=\"mt-4 flex items-center\">\n            <LoadingSpinner size=\"sm\" />\n            <span className=\"ml-2\">{status}</span>\n          </div>\n        )}\n      </div>\n\n      {/* Log output */}\n      <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\n        <div className=\"bg-gray-50 px-4 py-2 border-b border-gray-200\">\n          <h3 className=\"font-medium\">Migration Log</h3>\n        </div>\n        <div className=\"bg-gray-900 text-gray-100 p-4 font-mono text-sm h-80 overflow-y-auto\">\n          {logs.length === 0 ? (\n            <div className=\"text-gray-500\">No logs yet. Run the migration to see details.</div>\n          ) : (\n            logs.map((log, i) => (\n              <div key={i} className={`mb-1 ${\n                log.type === 'error' ? 'text-red-400' : \n                log.type === 'warning' ? 'text-yellow-400' : \n                log.type === 'success' ? 'text-green-400' : 'text-gray-300'\n              }`}>\n                <span className=\"opacity-70\">[{log.timestamp.toLocaleTimeString()}]</span> {log.message}\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MigrationHelper;\n"],"names":["MigrationHelper","loading","setLoading","useState","status","setStatus","error","setError","success","setSuccess","userCount","setUserCount","storeCount","setStoreCount","storeUserCount","setStoreUserCount","logs","setLogs","addLog","message","type","prev","runMigration","profiles","profilesError","supabase","stores","storesError","existingStoreUsers","storeUsersError","usersToAddToStore","profile","su","defaultStore","newStore","createStoreError","targetStoreId","result","ensureUserInStore","err","jsxs","jsx","Alert","LoadingSpinner","log","i"],"mappings":"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"}