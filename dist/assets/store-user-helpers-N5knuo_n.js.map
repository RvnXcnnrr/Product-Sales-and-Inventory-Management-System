{"version":3,"file":"store-user-helpers-N5knuo_n.js","sources":["../../src/utils/store-user-helpers.js"],"sourcesContent":["// Direct DB operations for the migration helper to fix user-store relationships\n\n/**\n * Ensures a user is properly connected to a store in the store_users table\n * @param {object} supabase - Supabase client instance\n * @param {string} userId - The user's ID to connect\n * @param {string} storeId - The store ID to connect the user to\n * @param {string} role - User's role (owner, admin, staff)\n * @returns {Promise<object>} Result object with success/error info\n */\nexport const ensureUserInStore = async (supabase, userId, storeId, role = 'staff') => {\n  try {\n    if (!userId) throw new Error('User ID is required');\n    if (!storeId) throw new Error('Store ID is required');\n    \n    // Check if the user-store relationship already exists\n    const { data: existingMapping, error: checkError } = await supabase\n      .from('store_users')\n      .select('id')\n      .eq('user_id', userId)\n      .eq('store_id', storeId)\n      .single();\n      \n    if (checkError && checkError.code !== 'PGRST116') { // PGRST116 is \"no rows returned\" which is expected\n      console.error('Error checking store_users:', checkError);\n      return { \n        success: false, \n        error: checkError,\n        message: `Failed to check if user is in store: ${checkError.message}`\n      };\n    }\n    \n    // If mapping already exists, just return success\n    if (existingMapping) {\n      return { \n        success: true, \n        created: false,\n        message: 'User already connected to store'\n      };\n    }\n    \n    // Create the store_users record\n    const timestamp = new Date().toISOString();\n    const { error: insertError } = await supabase\n      .from('store_users')\n      .insert([{\n        user_id: userId,\n        store_id: storeId,\n        role: role,\n        is_active: true,\n        created_at: timestamp,\n        updated_at: timestamp\n      }]);\n      \n    if (insertError) {\n      console.error('Error inserting store_users:', insertError);\n      return { \n        success: false, \n        error: insertError,\n        message: `Failed to add user to store: ${insertError.message}`\n      };\n    }\n    \n    // Update the user's profile with the store_id\n    const { error: updateError } = await supabase\n      .from('profiles')\n      .update({ store_id: storeId })\n      .eq('id', userId);\n      \n    if (updateError) {\n      console.warn('Warning: Could not update profile with store_id:', updateError);\n      // We don't fail completely here, as the critical part (store_users entry) worked\n    }\n    \n    return { \n      success: true, \n      created: true,\n      message: 'User successfully connected to store'\n    };\n  } catch (error) {\n    console.error('Exception in ensureUserInStore:', error);\n    return { \n      success: false, \n      error,\n      message: `Exception connecting user to store: ${error.message}`\n    };\n  }\n};\n\n/**\n * Creates a store for a user if they don't have one\n * @param {object} supabase - Supabase client instance\n * @param {string} userId - User ID \n * @param {string} storeName - Name for the store\n * @param {string} role - User's role in the store\n * @returns {Promise<object>} Result with store info and success status\n */\nexport const createStoreForUser = async (supabase, userId, storeName, role = 'owner') => {\n  try {\n    if (!userId) throw new Error('User ID is required');\n    if (!storeName) throw new Error('Store name is required');\n    \n    const timestamp = new Date().toISOString();\n    const storeCode = storeName.substring(0, 3).toUpperCase() + Math.floor(Math.random() * 1000);\n    \n    // Prefer RPC to bypass RLS on stores safely\n    let storeId;\n    try {\n      const { data: rpcId, error: rpcErr } = await supabase.rpc('create_store_for_current_user', {\n        p_store_name: storeName,\n        p_role: role\n      });\n      if (rpcErr) throw rpcErr;\n      storeId = rpcId;\n    } catch (rpcError) {\n      console.warn('RPC create_store_for_current_user failed, falling back to direct insert:', rpcError);\n      // Fallback direct insert (requires RLS policy + grants)\n      const { data: store, error: storeError } = await supabase\n        .from('stores')\n        .insert([{\n          name: storeName,\n          code: storeCode,\n          created_at: timestamp,\n          updated_at: timestamp\n        }])\n        .select()\n        .single();\n      \n      if (storeError) {\n        console.error('Error creating store:', storeError);\n        return { \n          success: false, \n          error: storeError,\n          message: `Failed to create store: ${storeError.message}`\n        };\n      }\n      storeId = store.id;\n    }\n    \n    // Connect user to the new store\n    const result = await ensureUserInStore(supabase, userId, storeId, role);\n    \n    return {\n      ...result,\n      store: result.success ? { id: storeId, name: storeName } : null,\n      storeId\n    };\n  } catch (error) {\n    console.error('Exception in createStoreForUser:', error);\n    return { \n      success: false, \n      error,\n      message: `Exception creating store for user: ${error.message}`\n    };\n  }\n};\n"],"names":["ensureUserInStore","supabase","userId","storeId","role","existingMapping","checkError","timestamp","insertError","updateError","error","createStoreForUser","storeName","storeCode","rpcId","rpcErr","rpcError","store","storeError","result"],"mappings":"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"}